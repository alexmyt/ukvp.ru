# GitLab CI help:      <https://docs.gitlab.com/ee/ci/yaml/>
# GitLab environments: <https://docs.gitlab.com/ee/ci/variables/>
#
# IMPORTANT NOTICES:
# 1. You should make an protected tags rules in repository. Rules list:
# - Tag "*"; Allowed to create "No one"
# - Tag "v*.*.*"; Allowed to create "Maintainers"
# 2. You should make "Push Rule" - "Branch name" regex `[a-z0-9\/\-]+`
# 3. You should protect `master` branch - push for "Maintainers" only

# do not run pipeline on merge requests
workflow:
  rules:
    - if: $CI_MERGE_REQUEST_IID
      when: never
    - when: always

stages:
  - preparation
  - building
  - testing
  - deploy

# Variables
variables:
  DB_USERNAME: $DB_USERNAME
  DB_PASSWORD: $DB_PASSWORD
  DB_DATABASE: $DB_DATABASE
  DB_HOST: $DB_HOST
  #CI_DEBUG_TRACE: "true"

# inherit all global cache settings
cache: &global_cache
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - vendor/
    - node_modules/    
  policy: pull-push

composer:
  stage: preparation
  script:
    - php -v
    - composer install --prefer-dist --no-ansi --no-interaction --no-progress --no-scripts
    - cp .env.example .env
    - php artisan key:generate
  artifacts:
    paths:
      - .env
    expire_in: 2 hrs
    when: always

yarn:
  stage: preparation
  script:
    - yarn --version
    - yarn install --pure-lockfile

build_assets:
  stage: building
  # Download the artifacts for these jobs
  dependencies:
    - composer
  cache:
    <<: *global_cache
    policy: pull
  script:
    - yarn --version
    - yarn run production --progress false
  artifacts:
    paths:
      - public/css/
      - public/js/
      - public/fonts/
      - public/mix-manifest.json
    expire_in: 1 days
    when: always

db_seeding:
  stage: building
  services:
    - name: mysql:8.0
      command: ["--default-authentication-plugin=mysql_native_password"]
  # Download the artifacts for these jobs
  dependencies:
    - composer
  cache:
    <<: *global_cache
    policy: pull
  script:
    - mysql --version
    - php artisan migrate:fresh --seed
    - mysqldump --host="${DB_HOST}" --user="${DB_USERNAME}" --password="${DB_PASSWORD}" "${DB_DATABASE}" > db.sql
  artifacts:
    paths:
      - storage/logs # for debugging
      - db.sql
    expire_in: 1 days
    when: always

testing:
  stage: testing
  dependencies:
    - composer
    - build_assets
    - db_seeding
  cache:
    <<: *global_cache
    policy: pull
  script:
    - php -v
    - mysql --host="${DB_HOST}" --user="${DB_USERNAME}" --password="${DB_PASSWORD}" "${DB_DATABASE}" < db.sql
    - ./vendor/phpunit/phpunit/phpunit --version
    - php -d short_open_tag=off ./vendor/phpunit/phpunit/phpunit -v --colors=never --stderr
  artifacts:
    paths:
      - ./storage/logs # for debugging
    expire_in: 1 days
    when: on_failure


deploy_test:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_TAG !~ /^v\d+\.\d+\.\d+$/'
  environment:
    name: testing
    url: https://dev.ukvp.ru
  tags: 
    - dev
    - vds8
    - shell
  dependencies:
    - composer
    - build_assets
  cache:
    <<: *global_cache
    policy: pull
  script:
    - dep deploy testing --tag=$CI_COMMIT_REF_NAME -vvv
    
deploy_prod:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/' # when add version tag
  tags:
    - shell
  cache:
    <<: *global_cache
    policy: pull
  script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$DEPLOYER_SSH_PRIVATE_KEY")
    - dep deploy prod --tag=$CI_COMMIT_REF_NAME -vvv
  environment:
    name: production
    url: https://ukvp.ru
